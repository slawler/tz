*     This program is not exactly as listed in the documentation.
*     Slight improvements have been made in the usage of the cosine function.
*     The cosine table lookup has been removed and replace by
*     direct cosine computations.

*     modified to FORTRAN 77
*     This should be compatible with any compiler
*     reads from standard input (console)
*     write to standard output (console)
*     uses redirection to read/write disk files
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C     TIDE AND TIDAL CURRENTS PREDICTION SECTION, N/OMA132, NOS
C     PROGRAM NTP4
C     THIS PROGRAM PREDICTS HOURLY TIDAL HEIGHTS AND/OR DAILY
C     TIMES AND HEIGHTS OF TIDAL EXTREMES.
C     TIMES ARE CALCULATED TO THE NEAREST MINUTE AND HEIGHTS
C     ARE CALCULATED TO THE NEAREST TENTH OF A FOOT.
C
C     RELEASE OF NATIONAL OCEAN SERVICE COMPUTER PROGRAM SOFTWARE DISCLAIMER
C
C     THE ATTENDANT SOFTWARE AND ANY ASSOCIATED DATA WERE DEVELOPED FOR USE
C     BY THE NATIONAL OCEAN SERVICE UNDER CONTROLLED CONDITIONS OF SOFTWARE
C     MAINTENANCE, INPUT DATA QUALITY, PROCESSING CONFIGURATIONS, AND
C     OUTPUT DATA UTILIZATION.  ANY USE OF THIS SOFTWARE BY OTHER THAN THE
C     NATIONAL OCEAN SERVICE WOULD BE UNDER CONDITIONS NOT NECESSARILY
C     SUBJECT TO SUCH CONTROL.  THEREFORE, THE NATIONAL OCEAN SERVICE MAKES
C     NO WARRENTIES, EXPRESSED OR IMPLIED, CONCERNING THE ACCURACY,
C     COMPLETENESS, RELIABILITY, OR SUITABILITY FOR ANY PARTICULAR PURPOSE
C     OF THE INFORMATION AND DATA CONTAINED IN OR GENERATED BY THIS SOFTWARE
C     OR FURNISHED IN CONNECTION THEREWITH.  FURTHERMORE, THE NATIONAL
C     OCEAN SERVICE ASSUMES NO LIABILITY ASSOCIATED WITH THE USE OF SUCH
C     SOFTWARE, INFORMATION, AND DATA, AND ASSUMES NO RESPONSIBILITY TO
C     MAINTAIN THEM IN ANY MANNER OR MEANS.  ANY EXCEPTIONS TO THESE
C     CONDITIONS OF RELEASE MUST BE FORMALLY ESTABLISHED THROUGH NEGOTIATED
C     AGREEMENTS WITH THE NATIONAL OCEAN SERVICE.
C     SINCE THIS SOFTWARE AND ASSOCIATED INFORMATION AND DATA WERE
C     DEVELOPED AND COMPILED WITH U.S. GOVERNMENT FUNDING, NO PROPRIETARY
C     RIGHTS MAY BE ATTACHED TO THEM, NOR MAY THEY BE SOLD TO THE U.S.
C     GOVERNMENT AS PART OF ANY PROCUREMENT OF ADP PRODUCTS OR SERVICES.
C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      implicit real*8 (a-h,o-z)
      character*72 name
      DIMENSION A(128),AMP(128),EPOC(128),XODE(128),VPU(128),MO(13),
     1 SP(128),NBDAY(13),SPD(128),ARG(128),NEDAY(13),S(128),
     2 TABHR(25),ANG(128),KDAY(32),STORX(816),EXTIM(600),JXTIM(300),
     3 XHT(300),EPOCH(128),AMPA(128),XXHT(18),JJXTI(18),IYR(16),NUM(16),
     4 ISTA(18),NO(18),NHT(300)

      data (a(i),i=1,48)/             28.9841042d0,  30.0000000d0,
     1  28.4397295d0,  15.0410686d0,  57.9682084d0,  13.9430356d0,
     2  86.9523127d0,  44.0251729d0,  60.0000000d0,  57.4238337d0,
     3  28.5125831d0,  90.0000000d0,  27.9682084d0,  27.8953548d0,
     4  16.1391017d0,  29.4556253d0,  15.0000000d0,  14.4966939d0,
     5  15.5854433d0,   0.5443747d0,   0.0821373d0,   0.0410686d0,
     6   1.0158958d0,   1.0980331d0,  13.4715145d0,  13.3986609d0,
     7  29.9589333d0,  30.0410667d0,  12.8542862d0,  14.9589314d0,
     8  31.0158958d0,  43.4761563d0,  29.5284789d0,  42.9271398d0,
     9  30.0821373d0, 115.9364169d0,  58.9841042d0,  12.9271398d0,
     1  14.0251729d0,  14.5695476d0,  15.9748272d0,  16.0569644d0,
     2  30.5443747d0,  27.4238337d0,  28.9019669d0,  29.0662415d0,
     3  26.8794590d0,  26.9523126d0/
      data (a(i),i=49,96)/            27.4966873d0,  31.0980331d0,
     1  27.8039338d0,  28.5947204d0,  29.1483788d0,  29.3734880d0,
     2  30.7086493d0,  43.9430356d0,  45.0410686d0,  42.3827651d0,
     3  59.0662415d0,  58.4397295d0,  57.4966873d0,  56.9523127d0,
     4  58.5125831d0,  56.8794590d0,  59.5284789d0,  71.3668693d0,
     5  71.9112440d0,  73.0092770d0,  74.0251728d0,  74.1073100d0,
     6  72.9271398d0,  71.9933813d0,  72.4649023d0,  88.9841042d0,
     7  86.4079380d0,  87.4238337d0,  87.9682084d0,  85.3920421d0,
     8  85.8635632d0,  88.5125831d0,  87.4966873d0,  89.0662415d0,
     9  85.9364168d0,  86.4807916d0,  88.0503457d0, 100.3509735d0,
     1 100.9046318d0, 101.9112440d0, 103.0092771d0, 116.4079380d0,
     2 116.9523127d0, 117.9682084d0, 114.8476674d0, 115.3920422d0,
     3 117.4966873d0, 115.4648958d0/
      data (a(i),i=97,124)/          116.4807916d0, 117.0344500d0,
     1 118.0503457d0, 129.8887360d0, 130.4331108d0, 130.9774855d0,
     2 131.9933813d0, 144.3761464d0, 144.9205211d0, 145.3920422d0,
     3 145.9364169d0, 146.4807916d0, 146.9523127d0, 160.9774855d0,
     4 174.3761464d0, 174.9205211d0, 175.4648958d0, 175.9364169d0,
     5  14.9178647d0,  15.0821353d0,  15.1232059d0,  15.5125897d0,
     6  30.6265119d0,  27.3416965d0,  42.9271398d0,  60.0821373d0,
     7  16.1391016d0,  12.8450026d0/

      DATA TABHR      /  -24.,  720., 1392., 2136., 2856., 3600.,              2
     1    4320., 5064., 5808., 6528., 7272., 7992.,  -24.,  720., 1416.,
     2    2160., 2880., 3624., 4344., 5088., 5832., 6552., 7296., 8016.,
     3       0. /

*     calculate 2*pi, asin(1) = pi/2 radians
      twopi = dasin(1.0d0) * 4.0d0

*     conversion factor for degrees to radians
      radians = 90.0d0/dasin(1.0d0)

      ms = 1
      my = 1
      md = 1

*     convert speeds from degrees to radians/hour
      DO 90 J = 1,124                                                          5
      A(J) = A(J) / radians
   90 CONTINUE

  100 IF (MS) 120,120,110                                                      6
  110 READ (*,550) name                                                        7
      READ (*,532) DATUM,IND,IND1

      if (ind1.eq.0) then
        nc = 6
        ny = 5
        ncon = 37
      else
        nc = 18
        ny = 16
        ncon = 124
      end if

      do 111 k = 1,nc
      nb = 7*k - 6
      ne = nb + 6
      read (5,531) ista(k),no(k),(amp(kk),epoc(kk),kk=nb,ne)
  111 continue

  112 DO 113 L = 1,nc-1
      IF (ISTA(L).NE.ISTA(L+1)) GO TO 451
  113 CONTINUE
      ISTA1 = ISTA(1)
      DO 114 L = 1,nc
      IF (NO(L).NE.L) GO TO 450
  114 CONTINUE
*     convert epoc from degrees to radians

      do l=1,ncon
        epoc(l) = epoc(l) / radians
      end do
  120 IF (MY) 131,131,125                                                      8
  125 continue

*     read 5 or 16 year data cards
      do 128 k=1,ny
      nb = 8*k - 7
      ne = nb + 7
      read (5,533) iyr(k),ly1,num(k),(xode(kk),vpu(kk),kk=nb,ne)
  128 continue

      DO 127 L = 1,ny-1
      IF (IYR(L).NE.IYR(L+1)) GO TO 452
  127 CONTINUE
      DO 130 L = 1,ny
      IF (NUM(L).NE.L) GO TO 453
  130 CONTINUE
*     convert vpu from degrees to radians
      do l=1,ncon
        vpu(l) = vpu(l) / radians
      end do
      IYR0 = MOD(IYR(1),100)
      IYR1 = IYR(1)
  131 IF (MD) 160,160,140                                                     10
  140 READ (*,534)    (MO(J), NBDAY(J), NEDAY(J), J = 1,12)                   11
C     SET UP TABLES FOR NON-ZERO CONSTITUENTS
  160 K = 0
      DO 180 J = 1,ncon                                                       12
      IF (AMP(J).EQ.0.0) GO TO 180
      K = K + 1
      AMPA(K) = AMP(J) * XODE(J)
      TEMX = VPU(J) - EPOC(J)
      IF (TEMX .GE. 0.) GO TO 171
      TEMX = TEMX + twopi
  171 EPOCH(K) = TEMX
      SPD(K) = A(J)
      SP(K) = SPD(K) / 10.
      S(K) = SPD(K) / 60.
  180 CONTINUE
      NOCON = K                                                               13
C     OPERATING TABLES NOW STORED AS AMPA(K),EPOCH(K),SPD(K),SP(K),S(K)
      DO 2000 JP = 1,12
      MO(13) = MO(JP)                                                         14
      NBDAY(13) = NBDAY(JP)
      NEDAY(13) = NEDAY(JP)
      NNEDA = NEDAY(13) + 1
      IF (MO(JP)) 2005,2005,190                                               15
  190 NODAYS = NEDAY(13) - NBDAY(13) + 3                                      16
      NOD = NODAYS - 2
      NOHRS = NODAYS * 24
      HRS = NOHRS
C     DETERMINE FIRST HOUR OF TIME PERIOD
      IF (LY1) 200,200,210                                                    17
  200 K = MO(13)
      GO TO 215
  210 K =  MO(13) + 12
  215 BDAY = NBDAY(13)
      FIRST = TABHR(K) + BDAY * 24.
      NFIRST = FIRST
      DO 220 J = 1,816                                                        18
      STORX(J) = 0.
  220 CONTINUE
C     TIDE = DATUM + AMPA(K) * COS(A(K) * T + EPOCH(K))
      kount = 0
      kt = 0
      DO 380  K = 1,NOHRS
      IF (KOUNT.GT.0) GO TO 260
      KOUNT = 1
  231 DO 250 J = 1,NOCON                                                      20
      ARGU = SPD(J) * FIRST + EPOCH(J)
      arg(j) = mod(argu,twopi)
  250 CONTINUE
      GO TO 290
  260 DO 280  J = 1,NOCON                                                     21
      ARG(J) = ARG(J) + SPD(J)
c     arg(j) = mod(arg(j),twopi)
  280 CONTINUE
  290 DO 374 J = 1,NOCON                                                      22
      STORX(K) = STORX(K) + AMPA(J) * cos(arg(j))                             24
  374 CONTINUE                                                                27
      STORX(K) = STORX(K) + DATUM
      IF (K.NE.NOHRS) GO TO 380                                               28
      IF (KT.EQ.1) GO TO 378
      FIRST = FIRST + HRS - 1.
      KT = 1
      CHECK = STORX(K)                                                        29
      STORX(K) = 0.
      GO TO 231                                                               30
  378 CKSUM = CHECK - STORX(K)                                                31
  380 CONTINUE
      GO TO (419,401,401),IND                                                 32
  401 KDAY(1) = NBDAY(13)                                                     33
      DO 410 I = 2,NOD
      KDAY(I) = KDAY(I-1) + 1
  410 CONTINUE
      write (*,550) name                                                      34
      write (*,556) IYR1,MO(13),DATUM,CKSUM
      write (*,557)                                                           35
      write (*,537) (KDAY(I), STORX(24*I-23), STORX(24*I-22), STORX(24*I
     1 -21),STORX(24*I-20), STORX(24*I-19), STORX(24*I-18), STORX(24*I-
     2 17), STORX(24*I-16), STORX(24*I-15), STORX(24*I-14), STORX(24*I-
     3 13), STORX(24*I-12), KDAY(I), STORX(24*I-11), STORX(24*I-10),
     4 STORX(24*I-9), STORX(24*I-8), STORX(24*I-7), STORX(24*I-6),
     5 STORX(24*I-5), STORX(24*I-4), STORX(24*I-3), STORX(24*I-2),
     6 STORX(24*I-1), STORX(24*I), I=1,NOD)
  419 IF (IND.EQ.3) GO TO 2000                                                36
C      COMPUTE TIMES AND HEIGHTS OF HIGH AND LOW WATERS
 1000  ITEMS = 0                                                              37
      k = 1
      nst = 1
      ijob = 1
       NOHRS = NOHRS - 1                                                      38
       DO 1500 I = 1,NOHRS                                                    39
       GO TO (1038,1275,1290,1426), IJOB                                      40
 1038  GO TO (1039,1270,1287),NST                                             41
 1039  NWHOA = 7
       TIME = NFIRST * 10
       NARC = 1
       GO TO 1060
 1040  IF(STORX(I) - STORX(I+1)) 1285,1045,1265                               42
 1045  NWHOA = 1
       TIME = NFIRST * 10
       GO TO 1051
 1050  TIME = (NFIRST + I - 2) * 10                                           43
 1051  NARC = 1                                                               44
 1060  STOXR = DATUM
       GO TO (1075,1100),NARC
 1075  DO 1090 J = 1,NOCON
       ARGU = SP(J) * TIME + EPOCH(J)
      arg(j) = mod(argu,twopi)
 1090  CONTINUE
       GO TO 1120
 1100  DO 1110 J = 1,NOCON
       ARG(J) = ARG(J) + SP(J)
c      arg(j) = mod(arg(j),twopi)
 1110  CONTINUE
 1120  DO 1220 J = 1,NOCON
      STOXR = STOXR + AMPA(J) * cos(arg(j))
 1220  CONTINUE
       GO TO (1250,1260,1275,1280,1290,1295,1400,1410,1412), NWHOA            45
 1250  POINT1 = STOXR                                                         46
      nwhoa = 2
      narc = 2
       GO TO 1060
 1260  IF (POINT1 - STOXR) 1285,1060,1265
 1265  NWHOA = 3                                                              47
       NST = 2
 1270  IF (STORX(I) - STORX(I+1)) 1050,1050,1499                              48
 1275  POINT1 = STOXR                                                         49
       JHOL = 1
       NWHOA = 4
       NARC = 2
       TIME = TIME + 1.
       GO TO 1060
 1280  IF (POINT1 - STOXR) 1470,1296,1300                                     50
 1285  NWHOA = 5                                                              51
       NST = 3
 1287  IF (STORX(I) - STORX(I+1)) 1499,1050,1050                              52
 1290  POINT1 = STOXR                                                         53
      jhol = 2
      narc = 2
       NWHOA = 6
       TIME = TIME + 1.
       GO TO 1060
 1295  IF (POINT1 - STOXR) 1300,1296,1470                                     54
 1296  OTIME = TIME                                                           55
       TIME = TIME * 6. - 6.
       GO TO 1471
 1300  TIME = TIME + 1.
       POINT1 = STOXR
       GO TO 1060
 1310  IJOB = 2
      GO TO 1500
 1315  IJOB = 3
      GO TO 1500
 1400  POINT1 = STOXR                                                         56
       NWHOA = 8
       NARC = 2
       TIME = TIME + 1.
       GO TO 1060
 1410  IF (POINT1-STOXR) 1415,1411,1420
 1411  NWHOA = 9
       POINT2 = STOXR
       GO TO 1060
 1412  IF (POINT2-STOXR) 1413,1040,1414
 1413 JHOL = 1
      GO TO 1425
 1414 JHOL = 2
      GO TO 1425
 1415  IF (STOXR - STORX(I+1)) 1285,1315,1315
 1420  IF (STOXR - STORX(I+1)) 1310,1310,1265
 1425  IJOB = 4
      GO TO 1500
 1426  TIME = (TIME - 1.) * 6.                                                57
       GO TO 1471
 1428  TMPTM = EXTIM(K)                                                       58
 1430  K = K + 2
       ITEMS = ITEMS + 2
 1431  GO TO (1285,1265), JHOL
 1470  OTIME = TIME                                                           59
       TIME = TIME * 6. - 9.
 1471  AM = 0                                                                 60
       DO 1495 L = 1,7
       STOX = DATUM
       IF (L.GT.1) GO TO 1473
       DO 1472 J = 1,NOCON
       ARGU = S(J) * TIME + EPOCH(J)
       arg(j) = mod(argu,twopi)
 1472  CONTINUE
       GO TO 1476
 1473  DO 1475 J = 1,NOCON
       ARG(J) = ARG(J) + S(J)
c      arg(j) = mod(arg(j),twopi)
 1475  CONTINUE
 1476  DO 1486 J = 1,NOCON
      STOX = STOX + AMPA(J) * cos(arg(j))
 1486  CONTINUE
       IF (L.EQ.1) SAVIT = STOX
       GO TO (1490,1487), JHOL
 1487  IF (SAVIT.GE.STOX) GO TO 1495
       GO TO 1492
 1490  IF (SAVIT.LE.STOX) GO TO 1495
 1492  SAVIT = STOX
       AM = L - 1
 1495  CONTINUE
       EXTIM(K) = TIME + AM                                                   61
       EXTIM(K+1) = SAVIT
       IF (K.EQ.1) GO TO 1428
       IF (EXTIM(K) - TMPTM) 1496,1496,1428
 1496  TIME = OTIME + 1.
       POINT1 = STOXR
       GO TO 1051
 1499  IJOB = 1
 1500  CONTINUE
      nitems = 0
      mn = 0
       DO 1504 K = 2,ITEMS,2                                                  62
       MN = MN + 1
       IF (EXTIM(K)) 1501,1502,1502
 1501  NHT(MN) = EXTIM(K) * 10. - 0.5
       GO TO 1504
 1502  NHT(MN) = EXTIM(K) * 10. + 0.5
 1504  CONTINUE
       KSW = 9000                                                             63
      j = 1
      l = 1
      kj = 1
       KAYE = MN - 1
       DO 1515 K = 1,KAYE
       IF (KJ.EQ.2) GO TO 1513
       IF (NHT(K) - NHT(K+1)) 1505,1507,1505
 1505  IF ((EXTIM(J) + 120.0).GT.EXTIM(J+2)) GO TO 1510
 1506  EXTIM(L) = EXTIM(J)
       EXTIM(L+1) = EXTIM(J+1)
       L = L + 2
       J = J + 2
       NITEMS = NITEMS + 2
       GO TO 1514
 1507  IF ((EXTIM(J) + 120.0).GT.EXTIM(J+2)) GO TO 1512
       IF (EXTIM(J+1) - EXTIM(J+3)) 1508,1506,1509
 1508  EXTIM(J+1) = EXTIM(J+1) - 0.1
       NHT(K) = NHT(K) - 1
       GO TO 1506
 1509  EXTIM(J+3) = EXTIM(J+3) - 0.1
       NHT(K+1) = NHT(K+1) - 1
       GO TO 1506
 1510  IF (ABS(EXTIM(J+1) - EXTIM(J+3)).LE.0.05) GO TO 1512
       GO TO 1506
 1512  IF((K-KSW).EQ.1) GO TO 1506
       KJ = 2
      GO TO 1515
 1513  KSW = K
       J = J + 4
 1514  KJ = 1
 1515  CONTINUE
       KAY = NITEMS / 2                                                       64
       J = 0
       DO 1650 K = 1,NITEMS,2
       J = J + 1
       JHRS = EXTIM(K)
       XHT(J) = EXTIM(K+1)
       JDAY = MOD(JHRS,1440)
       JHR = JDAY / 60
       JMIN = MOD(JDAY,60)
       JXTIM(J) = JHR * 100 + JMIN
       IF (XHT(J)) 1600,1650,1650                                             65
 1600  IF (XHT(J).LE.-0.05) GO TO 1650
       XHT(J) = XHT(J) * (-1.0)
 1650  CONTINUE
      KK = KAY                                                                66
      IF(JP.EQ.1) GO TO 1670
      IF(JXTIM(1) - NSAV) 1652,1670,1660
 1652 KA = KAY - 1
      DO 1653 KO=1,KA
      JXTIM(KO) = JXTIM(KO+1)
      XHT(KO) = XHT(KO+1)
 1653 CONTINUE
      GO TO 1670
 1660 JXTIM(KK+1)=  JXTIM(KK)
      XHT(KK+1) = XHT(KK)
      KK = KK - 1
      IF(KK.EQ.0) GO TO 1665
      GO TO 1660
 1665 JXTIM(1) = NSAV
      XHT(1) = SAV
 1670  NDAY = NBDAY(13)                                                       67
       NCOUNT = 0
       NNJ = 1
 1674  write (*,550) name                                                     68
       write (*,560) IYR1,MO(13),CKSUM
       write (*,580)
 1704  DO 1750 I = 1,KAY                                                      69
       IF (JXTIM(I) - JXTIM(I+1)) 1705,1710,1715
 1705  NCOUNT = NCOUNT + 1
       GO TO 1750
 1710  write (*,581)
       STOP
 1715  NLAST = NNJ + NCOUNT
 1717  write (*,585)    NDAY,(JXTIM(J),XHT(J), J = NNJ,NLAST)
 1740  NNJ = NLAST + 1
       NCOUNT = 0
       NDAY = NDAY + 1
 1745 IF(NDAY.EQ.NNEDA) GO TO 1746
      GO TO 1750
 1746 SAV = XHT(I + 1)                                                        70
      NSAV = JXTIM(I + 1)
      GO TO 2000
 1750  CONTINUE
 2000  CONTINUE
 2005  READ (*,538)    MS,MY,MD                                               71
 2010  IF (MS+MY+MD) 2020,2020,100
 2020  STOP
  450 write (*,501)                                                           72
      STOP
  451 write (*,502)
      STOP
  452 write (*,503)                                                           73
      STOP
  453 write (*,504)
      STOP
  501 FORMAT (27H STATION CARDS OUT OF ORDER)
  502 FORMAT (31H STATION NUMBERS NOT CONSISTENT)
  503 FORMAT (28H YEAR NUMBERS NOT CONSISTENT)
  504 FORMAT (24H YEAR CARDS OUT OF ORDER)
  530 FORMAT (7F10.7)
  531 FORMAT(2I4,F5.3,F4.1,F5.3,F4.1,F5.3,F4.1,F5.3,F4.1,F5.3,F4.1,F5.3,
     1F4.1,F5.3,F4.1)
  532 FORMAT (F6.3,2i2)
  533 FORMAT (I4,2I2,F4.3,F4.1,F4.3,F4.1,F4.3,F4.1,F4.3,F4.1,F4.3,F4.1,
     1F4.3,F4.1,F4.3,F4.1,F4.3,F4.1)
  534 FORMAT (36I2)
  537 FORMAT (I9,12F9.1)
  538 FORMAT (3I4)
  550 FORMAT (a72)
  556 FORMAT (7X,30HPREDICTED HOURLY HEIGHTS  YEAR,I5,7H  MONTH,I3,7H  D
     1ATUM,F7.2,4X,34H  *NOAA, NATIONAL OCEAN SERVICE*   ,3X,F10.7/)
  557 FORMAT (7X,110HDAY   HOURS    HOURS    HOURS    HOURS    HOURS
     1HOURS    HOURS    HOURS    HOURS    HOURS    HOURS    HOURS/14X,10
     23H0/12     1/13     2/14     3/15     4/16     5/17     6/18     7
     3/19     8/20     9/21    10/22    11/23/)
  560 FORMAT (7X,44HTIDE PREDICTIONS (HIGH AND LOW WATERS)  YEAR,I5,7H,
     1MONTH,I3,36X,F10.7)
  580  FORMAT (112H       DAY     TIME     HT.     TIME     HT.     TIME
     1     HT.     TIME     HT.     TIME     HT.     TIME     HT.)
  581  FORMAT (28H CONSECUTIVE TIDES SAME TIME)
  585  FORMAT (1H0,I9,6(5X,I4,F8.1)/10X,6(5X,I4,F8.1)/10X,6(5X,I4,F8.1))
      END
